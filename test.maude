load cinni .
load syntax .
load semantics .

set print color on .

*** Structural Congruence
*** SC-SUM-ASSOC SC-SUM-INACT SC-COMP-ASSOC SC-COMP-COMM SC-COMP-INACT SC-RES SC-RES-INACT SC-SC-RES-COMP
reduce 'x{0}('x) . nil + ('y{0}('y) . nil + 'z{0}('z) . nil) == ('x{0}('x) . nil + 'y{0}('y) . nil) + 'z{0}('z) . nil .
reduce 'x{0}('x) . nil + 'y{0}('y) . nil == 'y{0}('y) . nil + 'x{0}('x) . nil .
reduce 'x{0}('x) . nil + nil == 'x{0}('x) . nil .
reduce 'x{0}('x) . nil | ('y{0}('y) . nil | 'z{0}('z) . nil) == ('x{0}('x) . nil | 'y{0}('y) . nil) | 'z{0}('z) . nil .
reduce 'x{0}('x) . nil | 'y{0}('y) . nil == 'y{0}('y) . nil | 'x{0}('x) . nil .
reduce 'x{0}('x) . nil | nil == 'x{0}('x) . nil .
reduce ['x]['y] 'x{0}('x) . nil == ['y]['x] 'x{0}('x) . nil .
reduce ['x] nil == nil .
reduce 'y{0}('y) . nil | ['x] 'x{0}('x) . nil == ['x] ('y{0}('y) . nil | 'x{0}('x) . nil) .

*** Operational Semantics
*** R-COM R-REP R-PAR R-RES
rewrite 'x{0} < 'y{0} > . nil | 'x{0}('z) . nil | 'w{0}('w) . nil .
rewrite 'x{0} < 'y{0} > . nil | ! 'x{0}('z) . nil | 'w{0}('w) . nil .
rewrite 'x{0} < 'y{0} > . nil | 'x{0}('z) . nil | 'w{0}('w) . nil .
rewrite ['x] ('x{0} < 'y{0} > . nil | 'x{0}('z) . nil | 'w{0}('w) . nil) .

*** Binding
rewrite ('x{0}('z) . 'z{0} < 'a{0} > . nil | 'x{0} < 'w{0} > . 'y{0} < 'w{0} > . nil) | 'y{0}('v) . 'v{0}('u) . nil .

*** Substitution
rewrite 'y{0} < 'z{0} > . nil | 'y{0}('x) . 'y{0}('z) . 'z{0} < 'x{0} > . nil .

*** Scope extrusion
rewrite ['x] ('z{0} < 'x{0} > . 'x{0} < 'x{0} > . nil) | 'z{0}('y) . 'x{0} < 'x{0} > . nil .

quit
